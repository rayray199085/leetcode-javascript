You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

var addTwoNumbers = function (l1, l2) {
  let l1Val = "";
  let l2Val = "";
  while (l1 != null) {
    l1Val = `${l1.val}${l1Val}`;
    l1 = l1.next;
  }
  while (l2 != null) {
    l2Val = `${l2.val}${l2Val}`;
    l2 = l2.next;
  }
  const longestStr = (l1Val.length >= l2Val.length ? l1Val : l2Val)
    .split("")
    .reverse()
    .join("");
  const shortestStr = (l1Val.length < l2Val.length ? l1Val : l2Val)
    .split("")
    .reverse()
    .join("");
  // console.log(longestStr, "l");
  // console.log(shortestStr, "s");
  let newStr = "";
  let remaining = 0;
  for (let index = 0; index < longestStr.length; index++) {
    const longEle = longestStr[index];
    if (index < shortestStr.length) {
      const shortEle = shortestStr[index];
      const tempSum = parseInt(longEle) + parseInt(shortEle) + remaining;
      if (tempSum < 10) {
        newStr = `${tempSum}${newStr}`;
        remaining = 0;
      } else {
        const c = tempSum % 10;
        remaining = Math.floor(tempSum / 10);
        newStr = `${c}${newStr}`;
      }
    } else {
      const tempSum = parseInt(longEle) + remaining;
      if (tempSum < 10) {
        newStr = `${tempSum}${newStr}`;
        remaining = 0;
      } else {
        const c = tempSum % 10;
        remaining = Math.floor(tempSum / 10);
        newStr = `${c}${newStr}`;
      }
    }
  }
  // console.log(newStr, "origin");
  if (remaining > 0) {
    newStr = `${remaining}${newStr}`;
  }
  const resStr = newStr;
  const charValArray = [];
  for (let index = 0; index < resStr.length; index++) {
    const char = resStr[index];
    charValArray.push(parseInt(char));
  }
  let rootNode = null;
  if (charValArray.length === 0) {
    return rootNode;
  } else {
    rootNode = new ListNode(charValArray[0], null);
    // console.log(rootNode.val);
    for (let index = 1; index < charValArray.length; index++) {
      const element = charValArray[index];
      rootNode = new ListNode(element, rootNode);
      // console.log(rootNode.val);
    }
    return rootNode;
  }
};
