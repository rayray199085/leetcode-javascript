Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function (s) {
  let maxLength = 0;
  let charMap = new Map();
  let lastDeleteIndex = 0;
  for (let index = 0; index < s.length; index++) {
    const element = s[index];

    if (charMap.has(element)) {
      for (let i = lastDeleteIndex; i < index; i++) {
        const e = s[i];
        if (charMap.has(e)) {
          charMap.delete(e);
          if (e === element) {
            lastDeleteIndex = i + 1;
            break;
          }
        }
      }
    }
    charMap.set(element, element);
    maxLength = maxLength < charMap.size ? charMap.size : maxLength;
    // console.log(element, charMap.size);
  }
//   console.log(maxLength);
  return maxLength;
};
